// <auto-generated />
using System;
using MediumProject.EF_MediumProject_CodeFirst.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediumProject.Migrations
{
    [DbContext(typeof(MediumContext))]
    [Migration("20210825202540_AddedReadTime")]
    partial class AddedReadTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.Story", b =>
                {
                    b.Property<int>("StoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("ClickCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("ReadTimeInMinutes")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StoryID")
                        .HasName("PK_StoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.StoryTopic", b =>
                {
                    b.Property<int>("StoryID")
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("StoryID", "TopicID")
                        .HasName("PK_Story_Topic");

                    b.HasIndex(new[] { "StoryID" }, "StoryID");

                    b.HasIndex(new[] { "TopicID" }, "TopicID");

                    b.ToTable("StoryTopics");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TopicID")
                        .HasName("PK_TopicID");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserID")
                        .HasName("PK_UserID");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasFilter("[Url] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.UserTopic", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "TopicID")
                        .HasName("PK_User_Topic");

                    b.HasIndex(new[] { "TopicID" }, "TopicID")
                        .HasDatabaseName("TopicID1");

                    b.HasIndex(new[] { "UserID" }, "UserID");

                    b.ToTable("UserTopics");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.Story", b =>
                {
                    b.HasOne("MediumProject.EF_MediumProject_CodeFirst.Entities.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_Story_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.StoryTopic", b =>
                {
                    b.HasOne("MediumProject.EF_MediumProject_CodeFirst.Entities.Story", "Story")
                        .WithMany("StoryTopics")
                        .HasForeignKey("StoryID")
                        .HasConstraintName("FK_Story_Topic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediumProject.EF_MediumProject_CodeFirst.Entities.Topic", "Topic")
                        .WithMany("StoryTopics")
                        .HasForeignKey("TopicID")
                        .HasConstraintName("FK_Topic_Story")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.UserTopic", b =>
                {
                    b.HasOne("MediumProject.EF_MediumProject_CodeFirst.Entities.Topic", "Topic")
                        .WithMany("UserTopics")
                        .HasForeignKey("TopicID")
                        .HasConstraintName("FK_Topic_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediumProject.EF_MediumProject_CodeFirst.Entities.User", "User")
                        .WithMany("UserTopics")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_User_Topic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.Story", b =>
                {
                    b.Navigation("StoryTopics");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.Topic", b =>
                {
                    b.Navigation("StoryTopics");

                    b.Navigation("UserTopics");
                });

            modelBuilder.Entity("MediumProject.EF_MediumProject_CodeFirst.Entities.User", b =>
                {
                    b.Navigation("Stories");

                    b.Navigation("UserTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
